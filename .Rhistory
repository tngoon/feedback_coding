)
condsum
plot(testallacc~condition, data=data, na.rm=TRUE)
plot(testoldacc~condition, data=data)
plot(testnearacc~condition, data=data)
plot(testfaracc~condition, data=data)
plot(analogyacc~condition, data=data)
pwr.anova.test(k=2,f=0.4,sig.level=.05,power=0.8)
xticks=c("Learn-Analogy", "Analogy-Learn")
#repeated trials
ggplot(condsum, aes(condition, testold, fill=condition)) +
guides(fill=FALSE) +
#scale_fill_grey(start = .7, end = .2) +
geom_col() +
geom_errorbar(aes(ymin=testold-testold_se, ymax=testold+testold_se), width=.2) +
labs(x="Condition",y="Repeated Test Trials Accuracy") +
scale_x_discrete(labels=xticks) +
theme_bw() +
theme(axis.text.x = element_text(size=12),
axis.text.y=element_text(size=12))
#near transfer test trials
ggplot(condsum, aes(condition, testnear, fill=condition)) +
guides(fill=FALSE) +
#scale_fill_grey(start = .7, end = .2) +
geom_col() +
geom_errorbar(aes(ymin=testnear-testnear_se, ymax=testnear+testnear_se), width=.2) +
labs(x="Condition",y="Near Transfer Trials Accuracy") +
scale_x_discrete(labels=xticks) +
theme_bw() +
theme(axis.text.x = element_text(size=12),
axis.text.y=element_text(size=12))
#far transfer test trials
ggplot(condsum, aes(condition, testfar, fill=condition)) +
guides(fill=FALSE) +
#scale_fill_grey(start = .7, end = .2) +
geom_col() +
geom_errorbar(aes(ymin=testfar-testfar_se, ymax=testfar+testfar_se), width=.2) +
labs(x="Condition",y="Fra Transfer Accuracy") +
scale_x_discrete(labels=xticks) +
theme_bw() +
theme(axis.text.x = element_text(size=12),
axis.text.y=element_text(size=12))
ggplot(data, aes(x=testallacc, y=analogyacc, color=condition)) +
geom_point() +
theme_bw() +
scale_colour_grey(start=0.7, end=0.2) +
scale_y_continuous("Analogy Performance (%)", limits=c(0,1)) +
scale_x_continuous("Test Performance (%)", limits=c(0,1)) +
geom_smooth(method=lm, aes(fill=condition), se=FALSE, fullrange=TRUE)
reg1 <- lm(testallacc~analogyacc + dprime,data=subset(data, condition=="BE"))
summary(reg1)
with(subset(data, condition=="BE"),plot(testallacc, analogyacc))
abline(reg1)
mod.reg1 <- lm(testallacc~analogyacc+dprime,data=subset(data, condition=="BE"))
mod2.reg1 <- lm(testallacc~analogyacc+dprime+analogyacc:dprime,data=subset(data, condition=="BE"))
summary(mod.reg1)
anova(reg1, mod.reg1)
anova(mod.reg1,mod2.reg1)
#summary(anova(reg1,mod.reg1))
reg2 <- lm(testallacc~analogyacc,data=subset(data, condition=="AE"))
summary(reg2)
with(subset(data, condition=="AE"),plot(testallacc, analogyacc))
abline(reg2)
with(subset(data, condition=="BE"),plot(analogyacc,dprime))
t.test(data$testfaracc[data$condition=="BE"],data$testfaracc[data$condition=="AE"])
#manova for multiple dependent variables
depvars <- cbind(data$testoldacc, data$testnearacc, data$testfaracc)
cond_manov <-manova(lm(depvars~condition, data=data))
summary(cond_manov)
#above chance
chancesum <- summarise(chance,
n=length(condition),
testall=mean(testallacc),
testall_sd=sd(testallacc),
testall_se=sd(testallacc)/sqrt(length(condition)),
testold=mean(testoldacc),
testold_sd=sd(testoldacc),
testold_se=sd(testoldacc)/sqrt(length(condition)),
testnear=mean(testnearacc),
testnear_sd=sd(testnearacc),
testnear_se=sd(testnearacc)/sqrt(length(condition)),
testfar=mean(testfaracc),
testfar_sd=sd(testfaracc),
testfar_se=sd(testfaracc)/sqrt(length(condition)),
analogy=mean(analogyacc),
analogy_sd=sd(analogyacc),
analogy_se=sd(analogyacc)/sqrt(length(condition))
)
chancesum
t.test(data$changefar[data$condition=="BE"],data$changefar[data$condition=="AE"])
t.test(data$change[data$condition=="BE"],data$change[data$condition=="AE"])
reg2 <- lm(testallacc~analogyacc+dprime,data=subset(data, condition=="AE"))
summary(reg2)
with(subset(data, condition=="AE"),plot(testallacc, analogyacc))
abline(reg2)
reg1 <- lm(testallacc~analogyacc,data=subset(data, condition=="BE"))
summary(reg1)
with(subset(data, condition=="BE"),plot(testallacc, analogyacc))
abline(reg1)
mod.reg1 <- lm(testallacc~dprime,data=subset(data, condition=="BE"))
summary(reg1)
with(subset(data, condition=="BE"),plot(testallacc, analogyacc))
abline(reg1)
#mod.reg1 <- lm(testallacc~analogyacc+dprime,data=subset(data, condition=="BE"))
#mod2.reg1 <- lm(testallacc~analogyacc+dprime+analogyacc:dprime,data=subset(data, condition=="BE"))
#summary(mod.reg1)
#anova(reg1, mod.reg1)
#anova(mod.reg1,mod2.reg1)
#summary(anova(reg1,mod.reg1))
mod.reg1 <- lm(testallacc~dprime,data=subset(data, condition=="BE"))
summary(reg1)
with(subset(data, condition=="BE"),plot(testallacc, dprime))
abline(reg1)
#mod.reg1 <- lm(testallacc~analogyacc+dprime,data=subset(data, condition=="BE"))
#mod2.reg1 <- lm(testallacc~analogyacc+dprime+analogyacc:dprime,data=subset(data, condition=="BE"))
#summary(mod.reg1)
#anova(reg1, mod.reg1)
#anova(mod.reg1,mod2.reg1)
#summary(anova(reg1,mod.reg1))
mod.reg1 <- lm(testallacc~dprime,data=subset(data, condition=="BE"))
summary(mod.reg1)
with(subset(data, condition=="BE"),plot(testallacc, dprime))
abline(mod.reg1)
#mod.reg1 <- lm(testallacc~analogyacc+dprime,data=subset(data, condition=="BE"))
#mod2.reg1 <- lm(testallacc~analogyacc+dprime+analogyacc:dprime,data=subset(data, condition=="BE"))
#summary(mod.reg1)
#anova(reg1, mod.reg1)
#anova(mod.reg1,mod2.reg1)
#summary(anova(reg1,mod.reg1))
mod.reg2 <- lm(testallacc~dprime,data=subset(data, condition=="AE"))
summary(mod.reg2)
with(subset(data, condition=="AE"),plot(testallacc, dprime))
abline(mod.reg2)
mod.reg1 <- lm(testallacc~dprime,data=subset(data, condition=="BE"))
summary(mod.reg1)
with(subset(data, condition=="BE"),plot(testallacc, dprime))
#abline(mod.reg1)
#mod.reg1 <- lm(testallacc~analogyacc+dprime,data=subset(data, condition=="BE"))
#mod2.reg1 <- lm(testallacc~analogyacc+dprime+analogyacc:dprime,data=subset(data, condition=="BE"))
#summary(mod.reg1)
#anova(reg1, mod.reg1)
#anova(mod.reg1,mod2.reg1)
#summary(anova(reg1,mod.reg1))
mod.reg1 <- lm(analogyallacc~dprime,data=subset(data, condition=="BE"))
mod.reg1 <- lm(analogyacc~dprime,data=subset(data, condition=="BE"))
summary(mod.reg1)
with(subset(data, condition=="BE"),plot(analogyacc, dprime))
#abline(mod.reg1)
#mod.reg1 <- lm(testallacc~analogyacc+dprime,data=subset(data, condition=="BE"))
#mod2.reg1 <- lm(testallacc~analogyacc+dprime+analogyacc:dprime,data=subset(data, condition=="BE"))
#summary(mod.reg1)
#anova(reg1, mod.reg1)
#anova(mod.reg1,mod2.reg1)
#summary(anova(reg1,mod.reg1))
mod.reg1 <- lm(analogyacc~dprime,data=subset(data, condition=="BE"))
summary(mod.reg1)
with(subset(data, condition=="BE"),plot(analogyacc, dprime))
abline(mod.reg1)
#mod.reg1 <- lm(testallacc~analogyacc+dprime,data=subset(data, condition=="BE"))
#mod2.reg1 <- lm(testallacc~analogyacc+dprime+analogyacc:dprime,data=subset(data, condition=="BE"))
#summary(mod.reg1)
#anova(reg1, mod.reg1)
#anova(mod.reg1,mod2.reg1)
#summary(anova(reg1,mod.reg1))
mod.reg1 <- lm(testfaracc~analogyacc+dprime,data=subset(data, condition=="BE"))
summary(mod.reg1)
with(subset(data, condition=="BE"),plot(testfaracc, analogyacc))
abline(mod.reg1)
#mod.reg1 <- lm(testallacc~analogyacc+dprime,data=subset(data, condition=="BE"))
#mod2.reg1 <- lm(testallacc~analogyacc+dprime+analogyacc:dprime,data=subset(data, condition=="BE"))
#summary(mod.reg1)
#anova(reg1, mod.reg1)
#anova(mod.reg1,mod2.reg1)
#summary(anova(reg1,mod.reg1))
reg2 <- lm(testfaracc~analogyacc+dprime,data=subset(data, condition=="AE"))
summary(reg2)
with(subset(data, condition=="AE"),plot(testfaracc, analogyacc))
abline(reg2)
#with(subset(data, condition=="BE"),plot(analogyacc,dprime))
library(ggplot2)
library(car)
library(dplyr)
library(lme4)
library(nlme)
require(reshape2)
require(pwr)
data <- read.table("Data/mturk_revised.csv", sep=",", header=TRUE)
data <- na.omit(data)
#group by condition
data <- group_by(data, condition)
head(data)
#above chance
chance <- read.table("Data/above_chance.csv", sep=",", header=TRUE)
chance <- group_by(chance, condition)
condsum <- summarise(data,
n=length(condition),
learning=mean(learningacc),
learning_sd=sd(learningacc),
learning_se=sd(learningacc)/sqrt(length(condition)),
testall=mean(testallacc),
testall_sd=sd(testallacc),
testall_se=sd(testallacc)/sqrt(length(condition)),
testold=mean(testoldacc),
testold_sd=sd(testoldacc),
testold_se=sd(testoldacc)/sqrt(length(condition)),
testnear=mean(testnearacc),
testnear_sd=sd(testnearacc),
testnear_se=sd(testnearacc)/sqrt(length(condition)),
testfar=mean(testfaracc),
testfar_sd=sd(testfaracc),
testfar_se=sd(testfaracc)/sqrt(length(condition)),
analogy=mean(analogyacc),
analogy_sd=sd(analogyacc),
analogy_se=sd(analogyacc)/sqrt(length(condition)),
change_mean=mean(change),
change_sd=sd(change),
change_se=sd(change)/sqrt(length(condition)),
changefar_mean=mean(changefar),
changefar_sd=sd(changefar),
changefar_se=sd(changefar)/sqrt(length(condition))
)
condsum
plot(testallacc~condition, data=data, na.rm=TRUE)
plot(testoldacc~condition, data=data)
plot(testnearacc~condition, data=data)
plot(testfaracc~condition, data=data)
plot(analogyacc~condition, data=data)
pwr.anova.test(k=2,f=0.4,sig.level=.05,power=0.8)
xticks=c("Learn-Analogy", "Analogy-Learn")
#repeated trials
ggplot(condsum, aes(condition, testold, fill=condition)) +
guides(fill=FALSE) +
#scale_fill_grey(start = .7, end = .2) +
geom_col() +
geom_errorbar(aes(ymin=testold-testold_se, ymax=testold+testold_se), width=.2) +
labs(x="Condition",y="Repeated Test Trials Accuracy") +
scale_x_discrete(labels=xticks) +
theme_bw() +
theme(axis.text.x = element_text(size=12),
axis.text.y=element_text(size=12))
#near transfer test trials
ggplot(condsum, aes(condition, testnear, fill=condition)) +
guides(fill=FALSE) +
#scale_fill_grey(start = .7, end = .2) +
geom_col() +
geom_errorbar(aes(ymin=testnear-testnear_se, ymax=testnear+testnear_se), width=.2) +
labs(x="Condition",y="Near Transfer Trials Accuracy") +
scale_x_discrete(labels=xticks) +
theme_bw() +
theme(axis.text.x = element_text(size=12),
axis.text.y=element_text(size=12))
#far transfer test trials
ggplot(condsum, aes(condition, testfar, fill=condition)) +
guides(fill=FALSE) +
#scale_fill_grey(start = .7, end = .2) +
geom_col() +
geom_errorbar(aes(ymin=testfar-testfar_se, ymax=testfar+testfar_se), width=.2) +
labs(x="Condition",y="Fra Transfer Accuracy") +
scale_x_discrete(labels=xticks) +
theme_bw() +
theme(axis.text.x = element_text(size=12),
axis.text.y=element_text(size=12))
ggplot(data, aes(x=testallacc, y=analogyacc, color=condition)) +
geom_point() +
theme_bw() +
scale_colour_grey(start=0.7, end=0.2) +
scale_y_continuous("Analogy Performance (%)", limits=c(0,1)) +
scale_x_continuous("Test Performance (%)", limits=c(0,1)) +
geom_smooth(method=lm, aes(fill=condition), se=FALSE, fullrange=TRUE)
reg1 <- lm(testallacc~analogyacc,data=subset(data, condition=="BE"))
summary(reg1)
with(subset(data, condition=="BE"),plot(testallacc, analogyacc))
abline(reg1)
mod.reg1 <- lm(testfaracc~analogyacc+dprime,data=subset(data, condition=="BE"))
summary(mod.reg1)
with(subset(data, condition=="BE"),plot(testfaracc, analogyacc))
abline(mod.reg1)
#mod.reg1 <- lm(testallacc~analogyacc+dprime,data=subset(data, condition=="BE"))
#mod2.reg1 <- lm(testallacc~analogyacc+dprime+analogyacc:dprime,data=subset(data, condition=="BE"))
#summary(mod.reg1)
#anova(reg1, mod.reg1)
#anova(mod.reg1,mod2.reg1)
#summary(anova(reg1,mod.reg1))
reg2 <- lm(testfaracc~analogyacc+dprime,data=subset(data, condition=="AE"))
summary(reg2)
with(subset(data, condition=="AE"),plot(testfaracc, analogyacc))
abline(reg2)
#with(subset(data, condition=="BE"),plot(analogyacc,dprime))
mod.reg2 <- lm(testallacc~dprime,data=subset(data, condition=="AE"))
summary(mod.reg2)
with(subset(data, condition=="AE"),plot(testallacc, dprime))
abline(mod.reg2)
t.test(data$testfaracc[data$condition=="BE"],data$testfaracc[data$condition=="AE"])
#manova for multiple dependent variables
depvars <- cbind(data$testoldacc, data$testnearacc, data$testfaracc)
cond_manov <-manova(lm(depvars~condition, data=data))
summary(cond_manov)
#above chance
chancesum <- summarise(chance,
n=length(condition),
testall=mean(testallacc),
testall_sd=sd(testallacc),
testall_se=sd(testallacc)/sqrt(length(condition)),
testold=mean(testoldacc),
testold_sd=sd(testoldacc),
testold_se=sd(testoldacc)/sqrt(length(condition)),
testnear=mean(testnearacc),
testnear_sd=sd(testnearacc),
testnear_se=sd(testnearacc)/sqrt(length(condition)),
testfar=mean(testfaracc),
testfar_sd=sd(testfaracc),
testfar_se=sd(testfaracc)/sqrt(length(condition)),
analogy=mean(analogyacc),
analogy_sd=sd(analogyacc),
analogy_se=sd(analogyacc)/sqrt(length(condition))
)
chancesum
t.test(data$changefar[data$condition=="BE"],data$changefar[data$condition=="AE"])
t.test(data$change[data$condition=="BE"],data$change[data$condition=="AE"])
library(ggplot2)
library(car)
library(dplyr)
library(lme4)
library(nlme)
require(reshape2)
require(pwr)
data <- read.table("Data/mturk_revised.csv", sep=",", header=TRUE)
data <- na.omit(data)
#group by condition
data <- group_by(data, condition)
head(data)
#above chance
chance <- read.table("Data/above_chance.csv", sep=",", header=TRUE)
chance <- group_by(chance, condition)
condsum <- summarise(data,
n=length(condition),
learning=mean(learningacc),
learning_sd=sd(learningacc),
learning_se=sd(learningacc)/sqrt(length(condition)),
testall=mean(testallacc),
testall_sd=sd(testallacc),
testall_se=sd(testallacc)/sqrt(length(condition)),
testold=mean(testoldacc),
testold_sd=sd(testoldacc),
testold_se=sd(testoldacc)/sqrt(length(condition)),
testnear=mean(testnearacc),
testnear_sd=sd(testnearacc),
testnear_se=sd(testnearacc)/sqrt(length(condition)),
testfar=mean(testfaracc),
testfar_sd=sd(testfaracc),
testfar_se=sd(testfaracc)/sqrt(length(condition)),
analogy=mean(analogyacc),
analogy_sd=sd(analogyacc),
analogy_se=sd(analogyacc)/sqrt(length(condition)),
change_mean=mean(change),
change_sd=sd(change),
change_se=sd(change)/sqrt(length(condition)),
changefar_mean=mean(changefar),
changefar_sd=sd(changefar),
changefar_se=sd(changefar)/sqrt(length(condition))
)
condsum
plot(testallacc~condition, data=data, na.rm=TRUE)
plot(testoldacc~condition, data=data)
plot(testnearacc~condition, data=data)
plot(testfaracc~condition, data=data)
plot(analogyacc~condition, data=data)
pwr.anova.test(k=2,f=0.4,sig.level=.05,power=0.8)
xticks=c("Learn-Analogy", "Analogy-Learn")
#repeated trials
ggplot(condsum, aes(condition, testold, fill=condition)) +
guides(fill=FALSE) +
#scale_fill_grey(start = .7, end = .2) +
geom_col() +
geom_errorbar(aes(ymin=testold-testold_se, ymax=testold+testold_se), width=.2) +
labs(x="Condition",y="Repeated Test Trials Accuracy") +
scale_x_discrete(labels=xticks) +
theme_bw() +
theme(axis.text.x = element_text(size=12),
axis.text.y=element_text(size=12))
#near transfer test trials
ggplot(condsum, aes(condition, testnear, fill=condition)) +
guides(fill=FALSE) +
#scale_fill_grey(start = .7, end = .2) +
geom_col() +
geom_errorbar(aes(ymin=testnear-testnear_se, ymax=testnear+testnear_se), width=.2) +
labs(x="Condition",y="Near Transfer Trials Accuracy") +
scale_x_discrete(labels=xticks) +
theme_bw() +
theme(axis.text.x = element_text(size=12),
axis.text.y=element_text(size=12))
#far transfer test trials
ggplot(condsum, aes(condition, testfar, fill=condition)) +
guides(fill=FALSE) +
#scale_fill_grey(start = .7, end = .2) +
geom_col() +
geom_errorbar(aes(ymin=testfar-testfar_se, ymax=testfar+testfar_se), width=.2) +
labs(x="Condition",y="Fra Transfer Accuracy") +
scale_x_discrete(labels=xticks) +
theme_bw() +
theme(axis.text.x = element_text(size=12),
axis.text.y=element_text(size=12))
ggplot(data, aes(x=testallacc, y=analogyacc, color=condition)) +
geom_point() +
theme_bw() +
scale_colour_grey(start=0.7, end=0.2) +
scale_y_continuous("Analogy Performance (%)", limits=c(0,1)) +
scale_x_continuous("Test Performance (%)", limits=c(0,1)) +
geom_smooth(method=lm, aes(fill=condition), se=FALSE, fullrange=TRUE)
reg1 <- lm(testallacc~analogyacc,data=subset(data, condition=="BE"))
summary(reg1)
with(subset(data, condition=="BE"),plot(testallacc, analogyacc))
abline(reg1)
mod.reg1 <- lm(testfaracc~analogyacc+dprime,data=subset(data, condition=="BE"))
summary(mod.reg1)
with(subset(data, condition=="BE"),plot(testfaracc, analogyacc))
abline(mod.reg1)
#mod.reg1 <- lm(testallacc~analogyacc+dprime,data=subset(data, condition=="BE"))
#mod2.reg1 <- lm(testallacc~analogyacc+dprime+analogyacc:dprime,data=subset(data, condition=="BE"))
#summary(mod.reg1)
#anova(reg1, mod.reg1)
#anova(mod.reg1,mod2.reg1)
#summary(anova(reg1,mod.reg1))
reg2 <- lm(testfaracc~analogyacc+dprime,data=subset(data, condition=="AE"))
summary(reg2)
with(subset(data, condition=="AE"),plot(testfaracc, analogyacc))
abline(reg2)
#with(subset(data, condition=="BE"),plot(analogyacc,dprime))
mod.reg2 <- lm(testallacc~dprime,data=subset(data, condition=="AE"))
summary(mod.reg2)
with(subset(data, condition=="AE"),plot(testallacc, dprime))
abline(mod.reg2)
t.test(data$testfaracc[data$condition=="BE"],data$testfaracc[data$condition=="AE"])
#manova for multiple dependent variables
depvars <- cbind(data$testoldacc, data$testnearacc, data$testfaracc)
cond_manov <-manova(lm(depvars~condition, data=data))
summary(cond_manov)
#above chance
chancesum <- summarise(chance,
n=length(condition),
testall=mean(testallacc),
testall_sd=sd(testallacc),
testall_se=sd(testallacc)/sqrt(length(condition)),
testold=mean(testoldacc),
testold_sd=sd(testoldacc),
testold_se=sd(testoldacc)/sqrt(length(condition)),
testnear=mean(testnearacc),
testnear_sd=sd(testnearacc),
testnear_se=sd(testnearacc)/sqrt(length(condition)),
testfar=mean(testfaracc),
testfar_sd=sd(testfaracc),
testfar_se=sd(testfaracc)/sqrt(length(condition)),
analogy=mean(analogyacc),
analogy_sd=sd(analogyacc),
analogy_se=sd(analogyacc)/sqrt(length(condition))
)
chancesum
t.test(data$changefar[data$condition=="BE"],data$changefar[data$condition=="AE"])
t.test(data$change[data$condition=="BE"],data$change[data$condition=="AE"])
depvars_chance <- cbind(chance$testoldacc, data$testnearacc, data$testfaracc)
chance_manov <-manova(lm(depvars_chance~condition, data=chance))
depvars_chance <- cbind(chance$testoldacc, data$testnearacc, data$testfaracc)
chance_manov <-Manova(lm(depvars_chance~condition, data=chance))
depvars_chance <- cbind(chance$testoldacc, data$testnearacc, data$testfaracc)
chance_manov <-aov(depvars_chance~condition, data=chance)
depvars_chance <- cbind(chance$testoldacc, data$testnearacc, data$testfaracc)
chance_manov <-aov(depvars_chance~condition, data=chance)
aov(lm(testoldacc~condition,data=chance))
summary(aov(lm(testoldacc~condition,data=chance)))
summary(aov(lm(testoldacc~condition,data=chance)))
summary(aov(lm(testnearacc~condition,data=chance)))
summary(aov(lm(testfaracc~condition,data=chance)))
reg3 <- lm(testallacc~analogyacc,data=subset(chance, condition=="BE"))
summary(reg1)
with(subset(chance, condition=="BE"),plot(testallacc, analogyacc))
abline(reg1)
reg3 <- lm(testallacc~analogyacc,data=subset(chance, condition=="BE"))
summary(reg3)
with(subset(chance, condition=="BE"),plot(testallacc, analogyacc))
abline(reg3)
reg3 <- lm(testallacc~analogyacc,data=subset(chance, condition=="AE"))
summary(reg3)
with(subset(chance, condition=="AE"),plot(testallacc, analogyacc))
abline(reg3)
ggplot(chance, aes(x=testallacc, y=analogyacc, color=condition)) +
geom_point() +
theme_bw() +
scale_colour_grey(start=0.7, end=0.2) +
scale_y_continuous("Analogy Performance (%)", limits=c(0,1)) +
scale_x_continuous("Test Performance (%)", limits=c(0,1)) +
geom_smooth(method=lm, aes(fill=condition), se=FALSE, fullrange=TRUE)
ggplot(chance, aes(x=testallacc, y=analogyacc, color=condition)) +
geom_point() +
theme_bw() +
scale_colour_grey(start=0.7, end=0.2) +
scale_y_continuous("Analogy Performance (%)") +
scale_x_continuous("Test Performance (%)") +
geom_smooth(method=lm, aes(fill=condition), se=FALSE, fullrange=TRUE)
reg3 <- lm(testallacc~analogyacc,data=subset(chance, condition=="BE"))
summary(reg3)
with(subset(chance, condition=="BE"),plot(testallacc, analogyacc))
abline(reg3)
getwd()
setwd("feedback_coding/")
library(tidytext)
library(ggplot2)
library(dplyr)
library(car)
#read in data
all_comments <- read.table("data/all_feedback.csv", header=TRUE, sep=",",quote="", comment.char="")
#read in data
all_comments <- read.table("data/all_feedback.csv", header=TRUE, sep=",", comment.char="")
